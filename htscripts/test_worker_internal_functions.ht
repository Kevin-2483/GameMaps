// 测试手动创建的Future
log('测试手动Future...')
var testFuture = Future(() => 'test value')
log('手动Future类型: ${typeof(testFuture)}')

// 尝试使用官方文档的语法
log('尝试官方文档语法...')
var future = Future(() => 42)
log('创建Future成功: ${typeof(future)}')

// 尝试调用then
future.then((value) => log('Future结果: ${value}'))
log('then调用成功')

// 尝试异步函数语法
log('尝试async函数语法...')
fun testAsync() async {
    return 'async result'
}

var asyncResult = testAsync()
log('async函数返回类型: ${typeof(asyncResult)}')
asyncResult.then((value) => log('async结果: ${value}'))

// 现在测试我们自定义的异步函数
log('=== 测试自定义异步函数 ===')
log('测试delay函数...')
var delayResult = delay(100)
log('delay返回类型: ${typeof(delayResult)}')

log('测试delayThen函数...')  
var delayThenResult = delayThen(200, 'hello')
log('delayThen返回类型: ${typeof(delayThenResult)}')

// 尝试调用then方法
log('尝试调用delay().then()...')
delay(300).then(() => log('delay完成!'))

log('尝试调用delayThen().then()...')
delayThen(400, 'world').then((value) => log('delayThen结果: ${value}'))